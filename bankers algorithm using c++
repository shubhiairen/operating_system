#include<iostream>
using namespace std;
const int nop=3;
const int nor=4;
void calculateNeed(int need[nop][nor], int maxm[nop][nor], 
                   int allot[nop][nor]) 
{ 
    for (int i = 0 ; i < nop ; i++) 
        for (int j = 0 ; j < nor ; j++)
            need[i][j] = maxm[i][j] - allot[i][j]; 
} 

bool check(int processes[], int avail[], int maxm[][nor], 
            int allot[][nor]) 
{ 
    int need[nop][nor]; 
    calculateNeed(need, maxm, allot); 
    bool finish[nop] = {0}; 
    int safe[nop]; 
    int work[nor]; 
    for (int i = 0; i < nor ; i++) 
        work[i] = avail[i]; 
    int count = 0; 
    while (count < nop) 
    { 
        bool found = false; 
        for (int p = 0; p < nop; p++) 
        { 
            if (finish[p] == 0) 
            { 
                int j; 
                for (j = 0; j < nor; j++) 
                    if (need[p][j] > work[j]) 
                        break; 
                if (j == nor) 
                { 
                    for (int k = 0 ; k < nor ; k++) 
                        work[k] += allot[p][k]; 
                        safe[count++] = p; 
                        finish[p] = 1; 
                        found = true; 
                } 
            } 
        } 
        if (found == false) 
        { 
            cout << "System is not in safe state"; 
            return false; 
        } 
    } 
    cout << "System is in safe state.\nSafe"
         " sequence is: "; 
    for (int i = 0; i < nop ; i++) 
        cout << safe[i] << " "; 
  
    return true; 
} 
  
int main()
{
	int processes[] = {0,1,2}; 
  
	
    int maxm[][nor] = {{2,2,2,2}, 
                      {1,1,3,4}, 
                      {1,3,5,0}}; 
    int allot[][nor]= {{1,2,2,1}, 
                      {1,0,3,2}, 
                      {1,2,1,0}}; 
    int avail[] = {3,1,1,2}; 
    check(processes, avail, maxm, allot); 
  return 0;

	
}
